#!/bin/bash
# Minimal, idempotent macOS bootstrap for chezmoi (Oh My Zsh specific).
# Core installs always. Extras opt-in via env vars:
#   INSTALL_DEV_EXTRAS=1 chezmoi apply
#   INSTALL_WORKSTATION_APPS=1 chezmoi apply

set -euo pipefail
{{- if ne .chezmoi.os "darwin" -}}
exit 0
{{- end -}}

# ------------------ toggles ------------------
INSTALL_DEV_EXTRAS="${INSTALL_DEV_EXTRAS:-0}"
INSTALL_WORKSTATION_APPS="${INSTALL_WORKSTATION_APPS:-0}"

# ------------------ preflight ----------------
if ! xcode-select -p >/dev/null 2>&1; then
  echo "[bootstrap] Installing Xcode Command Line Tools…"
  xcode-select --install || true
fi

if ! command -v brew >/dev/null 2>&1; then
  echo "[bootstrap] Installing Homebrew…"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  echo 'eval "$($(brew --prefix)/bin/brew shellenv)"' >> "$HOME/.zprofile"
  eval "$($(brew --prefix)/bin/brew shellenv)"
fi

brew update

# ------------------ helpers ------------------
have_formula() { brew list --formula --versions "$1" >/dev/null 2>&1; }
have_cask()    { brew list --cask    --versions "$1" >/dev/null 2>&1; }
install_or_upgrade_formula() { have_formula "$1" && brew upgrade "$1" || brew install "$1"; }
install_or_upgrade_cask()    { have_cask    "$1" && brew upgrade --cask "$1" || brew install --cask "$1"; }

# Adopt an existing /Applications app into brew casks
adopt_or_install_cask() {
  local cask="$1"; local app="${2:-}"
  if have_cask "$cask"; then brew upgrade --cask "$cask" || true
  elif [ -n "$app" ] && [ -d "$app" ]; then
    echo "[bootstrap] Adopting $app -> $cask"
    brew reinstall --cask "$cask" || brew install --cask "$cask"
  else brew install --cask "$cask"; fi
}

# ------------------ core packages ------------
CORE_FORMULAE=(
  # CLI foundation
  fzf ripgrep fd eza bat zoxide direnv jq yq gh
  lazygit neovim rtx

  # Linux parity & build helpers
  coreutils findutils gnu-sed pkg-config make tree watch btop

  # Networking / helpers
  curlie tldr

  # Safety & crypto
  trash gnupg
)

for f in "${CORE_FORMULAE[@]}"; do install_or_upgrade_formula "$f"; done

# Fonts (native macOS look with Nerd glyphs)
brew tap homebrew/cask-fonts >/dev/null 2>&1 || true
install_or_upgrade_cask font-sf-mono-nerd-font-ligaturized || install_or_upgrade_cask font-fira-code-nerd-font

# fzf keybindings
"$(brew --prefix)/opt/fzf/install" --no-bash --no-fish --key-bindings --completion || true

# ------------------ Oh My Zsh + theme/plugins ------------------
# Install OMZ (non-interactive, keep our chezmoi .zshrc)
if [ ! -d "$HOME/.oh-my-zsh" ]; then
  echo "[bootstrap] Installing Oh My Zsh…"
  RUNZSH=no KEEP_ZSHRC=yes CHSH=no \
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

# powerlevel10k theme under OMZ custom themes
THEME_DIR="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"
if [ ! -d "$THEME_DIR" ]; then
  echo "[bootstrap] Installing Powerlevel10k theme…"
  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$THEME_DIR"
fi

# common plugins: autosuggestions + syntax-highlighting
PLUG_BASE="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins"
if [ ! -d "$PLUG_BASE/zsh-autosuggestions" ]; then
  echo "[bootstrap] Installing zsh-autosuggestions…"
  git clone --depth=1 https://github.com/zsh-users/zsh-autosuggestions "$PLUG_BASE/zsh-autosuggestions"
fi
if [ ! -d "$PLUG_BASE/zsh-syntax-highlighting" ]; then
  echo "[bootstrap] Installing zsh-syntax-highlighting…"
  git clone --depth=1 https://github.com/zsh-users/zsh-syntax-highlighting "$PLUG_BASE/zsh-syntax-highlighting"
fi

# ------------------ dev extras (opt-in) ------------------
if [ "$INSTALL_DEV_EXTRAS" = "1" ] || [ "$INSTALL_DEV_EXTRAS" = "true" ]; then
  # Containers (moved here to keep core lean)
  install_or_upgrade_formula colima
  install_or_upgrade_formula docker
  install_or_upgrade_formula docker-compose

  # rtx: common global defaults (safe to re-run)
  if command -v rtx >/dev/null 2>&1; then
    rtx plugin add java   >/dev/null 2>&1 || true
    rtx plugin add scala  >/dev/null 2>&1 || true
    rtx plugin add golang >/dev/null 2>&1 || true
    rtx plugin add python >/dev/null 2>&1 || true
    rtx plugin add rust   >/dev/null 2>&1 || true
    rtx install -y java@11 scala@2.13 golang@latest python@3.12 rust@stable
    rtx global    java@11 scala@2.13 golang@latest python@3.12 rust@stable
  fi

  # Hint for Colima (don’t auto-start)
  if command -v colima >/dev/null 2>&1; then
    cat <<'HINT'
[bootstrap] To start Docker (no Docker Desktop):
  colima start --cpu 4 --memory 8 --disk 60
  docker context use default
HINT
  fi
fi

# ------------------ workstation apps (opt-in) ---------------
if [ "$INSTALL_WORKSTATION_APPS" = "1" ] || [ "$INSTALL_WORKSTATION_APPS" = "true" ]; then
  adopt_or_install_cask ghostty  /Applications/Ghostty.app
  adopt_or_install_cask vivaldi  /Applications/Vivaldi.app
  # adopt_or_install_cask rectangle /Applications/Rectangle.app
  # adopt_or_install_cask raycast   /Applications/Raycast.app
  # adopt_or_install_cask obsidian  /Applications/Obsidian.app
fi

# ------------------ lazyvim setup ------------------
# LazyVim will be automatically set up when Neovim is first launched
# This ensures the directories exist and lazy.nvim is installed
NVIM_CONFIG_DIR="$HOME/.config/nvim"
LAZY_NVIM_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/nvim/lazy/lazy.nvim"

if [ ! -d "$LAZY_NVIM_DIR" ]; then
  echo "[bootstrap] Setting up lazy.nvim for Neovim..."
  mkdir -p "$(dirname "$LAZY_NVIM_DIR")"
  git clone --filter=blob:none --branch=stable https://github.com/folke/lazy.nvim.git "$LAZY_NVIM_DIR"
  echo "[bootstrap] lazy.nvim installed. LazyVim will be set up on first Neovim launch."
fi

# ------------------ global gitignore pointer ----------------
if [ "$(git config --global --get core.excludesfile || true)" != "$HOME/.gitignore_global" ]; then
  git config --global core.excludesfile "$HOME/.gitignore_global" || true
fi

