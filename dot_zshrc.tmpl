# =====================================================================
# Zsh config (macOS-first) — managed by Oh My Zsh (OMZ) + Powerlevel10k
# Philosophy:
# - Keep "core" shell minimal on servers; full UX lives in dev profile.
# - Use Homebrew paths & plugins, but load them explicitly (no duplication).
# - Prefer GNU utilities for consistent scripting across macOS/Linux.
# =====================================================================


# ---- Editors ---------------------------------------------------------
# Make Neovim the default editor and keep quick aliases.
alias vi='nvim' ; alias vim='nvim'
alias old_vi='command vi' ; alias old_vim='command vim'  # escape hatches

# ---- Oh My Zsh base (plugin manager & compinit wrapper) --------------
# OMZ provides the git plugin, completions framework, and theme loader.
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Keep OMZ plugin list minimal. We load Homebrew-installed plugins manually
# below so we don't double-source them. 'git' plugin adds helpful aliases.
plugins=(
  git
)

# Ensure Homebrew "zsh-completions" are visible BEFORE OMZ runs compinit.
# (Only does anything if you've brewed `zsh-completions`.)
if command -v brew >/dev/null 2>&1; then
  fpath=($(brew --prefix)/share/zsh-completions $fpath)
fi

# Load OMZ if it exists (chezmoi/dev bootstrap installs it non-interactively).
[ -s "$ZSH/oh-my-zsh.sh" ] && source "$ZSH/oh-my-zsh.sh"

# ---- Powerlevel10k prompt --------------------------------------------
# Your prompt configuration (fast, async). Keep config in XDG path.
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


# ---- Zsh plugins via Homebrew (manual source; order matters) ----------
# We source Brew-installed plugins explicitly because OMZ doesn't search
# Homebrew's share/ paths by default. This avoids keeping git clones in $ZSH_CUSTOM.
if command -v brew >/dev/null 2>&1; then
  # Autosuggestions should load BEFORE syntax highlighting.
  [[ -r "$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]] \
    && source "$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh"

  # History substring search (bind keys for emacs & vi modes).
  if [[ -r "$(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh" ]]; then
    source "$(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh"
    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down
    bindkey -M vicmd 'k' history-substring-search-up 2>/dev/null || true
    bindkey -M vicmd 'j' history-substring-search-down 2>/dev/null || true
  fi

  # Syntax highlighting MUST be last for correct rendering.
  [[ -r "$(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]] \
    && source "$(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

# ---- fzf keybindings & completion (if installed) ---------------------
# Loads Ctrl-R search, path completion, etc., without modifying your rc files.
if command -v fzf >/dev/null 2>&1; then
  [[ -f "$(brew --prefix)/opt/fzf/shell/key-bindings.zsh" ]] && source "$(brew --prefix)/opt/fzf/shell/key-bindings.zsh"
  [[ -f "$(brew --prefix)/opt/fzf/shell/completion.zsh"    ]] && source "$(brew --prefix)/opt/fzf/shell/completion.zsh"
fi

# ---- Tool hooks (canonical, supported by tool authors) ----------------
# Use official init/activate hooks rather than OMZ plugin shims.
command -v direnv >/dev/null 2>&1 && eval "$(direnv hook zsh)"       # auto-load .envrc on cd
command -v zoxide >/dev/null 2>&1 && eval "$(zoxide init zsh)"       # smarter cd: `z <hint>`
command -v mise   >/dev/null 2>&1 && eval "$(mise activate zsh)"     # runtime manager shims & PATH

# ---- Safer deletion: send files to Trash in interactive shells -------
# Keeps 'rm' behavior safe for humans; scripts remain unaffected.
if [[ $- == *i* ]] && command -v trash >/dev/null 2>&1; then
  realrm() { command /bin/rm "$@"; }                                  # bypass alias
  trashrm() {
    local args=()
    for a in "$@"; do [[ "$a" == -* ]] || args+=("$a"); done
    [[ ${#args[@]} -gt 0 ]] || { echo "Usage: rm <files...>"; return 1; }
    trash "${args[@]}" && echo "🗑️  Moved to Trash. Use 'realrm' to delete permanently."
  }
  alias rm='trashrm'
  alias rmv='trash'
  setopt RM_STAR_WAIT 2>/dev/null || true
  alias trash-clean='trash-empty --days 14 || true'
fi

# ---- ls family: prefer eza, keep escape hatch ------------------------
# Alias only affects interactive use; scripts won't see aliases by default.
if [[ $- == *i* ]] && command -v eza >/dev/null 2>&1; then
  alias ls='eza'                                                      # modern ls
  alias l='eza -1'
  alias la='eza -la'
  alias ll='eza -lah --group-directories-first --git'
  alias lt='eza --tree --level=2 --group-directories-first --git'
else
  alias l='ls -1'
  alias la='ls -la'
  alias ll='ls -lah'
fi
alias old_ls='command ls'                                             # real BSD/GNU ls

# ---- Convenience aliases ---------------------------------------------
command -v lazygit    >/dev/null 2>&1 && alias lg='lazygit'
command -v lazydocker >/dev/null 2>&1 && alias lzd='lazydocker'


# ---- Load custom shrc.d snippets -----------------------------
# This lets chezmoi-managed files in ~/.config/zsh/shrc.d run automatically.
# Files are executed in lexical order (10-foo.sh, 20-bar.sh, etc.)
if [ -d "${XDG_CONFIG_HOME:-$HOME/.config}/zsh/shrc.d" ]; then
  for file in "${XDG_CONFIG_HOME:-$HOME/.config}/zsh/shrc.d"/*.sh; do
    [ -r "$file" ] && source "$file"
  done
fi
# ---- (Optional) GPG pinentry on macOS -------------------------------
# If you brewed pinentry-mac, uncomment to use a GUI prompt:
# if command -v pinentry-mac >/dev/null 2>&1; then
#   mkdir -p ~/.gnupg
#   grep -q 'pinentry-program' ~/.gnupg/gpg-agent.conf 2>/dev/null || \
#     echo "pinentry-program $(brew --prefix)/bin/pinentry-mac" >> ~/.gnupg/gpg-agent.conf
#   gpgconf --kill gpg-agent >/dev/null 2>&1 || true
# fi
