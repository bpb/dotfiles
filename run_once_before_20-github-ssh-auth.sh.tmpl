#!/usr/bin/env bash
# run_once_before_20-github-ssh-auth.sh.tmpl
# Generates an SSH key, loads it, optionally helps you log into GitHub,
# then uploads the public key. Idempotent and headless-safe.
set -euo pipefail
[[ "{{ if .profile.core }}1{{ else }}0{{ end }}" = "1" ]] || exit 0

log() { printf "\033[1;32m[gh-ssh]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[gh-ssh]\033[0m %s\n" "$*"; }

GH_HOST="${GH_HOST:-github.com}"
KEY="${SSH_KEY_PATH:-${HOME}/.ssh/id_ed25519}"
PUB="${KEY}.pub"
TITLE="{{ .chezmoi.hostname }}:{{ .chezmoi.username }}"

# 0) Preconditions
if ! command -v gh >/dev/null 2>&1; then
  warn "gh not found (expected preinstalled). Skipping GitHub upload."
fi

# 1) Tight ~/.ssh perms
mkdir -p "${HOME}/.ssh"
chmod 700 "${HOME}/.ssh"

# 2) Ensure key (Ed25519)
if [[ ! -f "$KEY" ]]; then
  EMAIL="$(git config --global user.email || true)"
  [[ -z "$EMAIL" ]] && EMAIL="${USER}@$(hostname -s)"
  log "Generating SSH key: $KEY"
  ssh-keygen -t ed25519 -C "$EMAIL" -f "$KEY" -N ""
else
  log "SSH key already exists at $KEY."
fi

# 3) Add to agent (macOS uses keychain)
eval "$(ssh-agent -s)" >/dev/null
if [[ "$(uname -s)" == "Darwin" ]]; then
  ssh-add --apple-use-keychain "$KEY" || true
else
  ssh-add "$KEY" || true
fi
log "SSH key loaded into ssh-agent."

# 4) Ensure gh auth
if command -v gh >/dev/null 2>&1; then
  if ! gh auth status -h "$GH_HOST" >/dev/null 2>&1; then
    # Non-interactive fast path with GH_TOKEN, if present.
    if [[ -n "${GH_TOKEN:-}" ]]; then
      printf '%s' "$GH_TOKEN" | gh auth login -h "$GH_HOST" --with-token >/dev/null 2>&1 || true
    fi
  fi

  if ! gh auth status -h "$GH_HOST" >/dev/null 2>&1; then
    # Interactive help only if a real terminal is attached.
    if [[ -t 0 && -t 1 && "${GH_INTERACTIVE_LOGIN:-1}" = "1" ]]; then
      warn "GitHub CLI is not authenticated for $GH_HOST."
      printf "Open browser and authenticate now? [Y/n]: "
      read -r ans || ans=""
      case "${ans,,}" in
      n | no) ;;
      *) gh auth login --web -h "$GH_HOST" --git-protocol ssh || true ;;
      esac
    else
      warn "Not authenticated. Run once and re-apply:
  gh auth login --web -h \"$GH_HOST\" --git-protocol ssh"
    fi
  fi
fi

# 5) Upload key if authed (idempotent)
if command -v gh >/dev/null 2>&1 && gh auth status -h "$GH_HOST" >/dev/null 2>&1; then
  if gh ssh-key add "$PUB" --title "$TITLE" 2> >(tee /tmp/gh_ssh_add.err >&2); then
    log "Uploaded SSH public key to $GH_HOST (title: $TITLE)."
  elif grep -qi "already in use" /tmp/gh_ssh_add.err; then
    log "Public key already present on $GH_HOST; skipping."
  else
    warn "Could not upload key automatically. Run:
  gh ssh-key add \"$PUB\" --title \"$TITLE\" -h \"$GH_HOST\""
  fi
fi

# 6) SSH connectivity check (non-fatal)
if ssh -o BatchMode=yes -T "git@${GH_HOST}" 2>&1 | grep -q "successfully authenticated"; then
  log "SSH to $GH_HOST works."
else
  warn "SSH to $GH_HOST not verified yet (likely before auth or key approval). Try:
  ssh -T git@${GH_HOST}"
fi
